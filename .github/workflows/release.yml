# A Workflow for triggering a new release.
#
# Releasing is a two-stage process.
# 1. Running this workflow will check the build is green and then push a release tag to the repo, e.g., v1.2.3
# 2. Pushing the release tag will trigger the main build.yml.
#    This main build has conditional steps to publish artifacts when building a tag

name: Release

on: [workflow_dispatch]

permissions:
  contents: read

concurrency: "${{ github.repository }}-versioning"

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ secrets.TRIGGER_GITHUB_TOKEN }}
      - name: Fetch version history
        run: git fetch --tags --unshallow
      - name: Set up JDK
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2
        with:
          gradle-home-cache-cleanup: true
      - name: Ensure build is green
        run: |
          # Locally, set the release version
          ./gradlew createRelease -Prelease.disableSnapshotsCheck
          # Fail on snapshots:
          ./gradlew verifyRelease 
          # Then run the build, with proposed creekVersion
          ./gradlew build
      - name: Release
        run: |
          # The following command will trigger the build.yml workflow as it pushes a release tag
          ./gradlew pushRelease
      - name: Capture version info
        run: |
          echo "Release version: $(./gradlew cV -q -Prelease.quiet)" >> $GITHUB_STEP_SUMMARY 

